#include<iostream>
using namespace std;

class Queue
{
public:
    int *arr;
    int size;
    int front;
    int rear;

    // Constructor to initialize the queue
    Queue(int size)
    {
        this->size = size;
        arr = new int[size];
        front = -1;             
        rear = -1;
    }

    // Function to insert an element into the queue
    void enqueue(int value)
    {
        if ((front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1)))
        {
            cout << "Queue is full" << "\n";
            return;
        }

        if (front == -1) // First element to push
        {
            front = rear = 0;
            arr[rear] = value;
        }
        else if (rear == size - 1 && front != 0) // Rear at the end but front isn't at the start
        {
            rear = 0; // To maintain the cyclic nature
            arr[rear] = value;
        }
        else  // Normal enqueue
        {
            rear++;
            arr[rear] = value;
        }
    }

    // Function to remove an element from the queue
    int dequeue()
    {
        if (front == -1) // To check if the queue is empty
        {
            cout << "Queue is empty" << "\n";
            return -1;
        }

        int ans = arr[front];
        arr[front] = -1; // Optional: Clear the dequeued position

        if (front == rear) // Only one element left
        {
            front = rear = -1;
        }
        else if (front == size - 1) // To maintain cyclic nature
        {
            front = 0;
        }
        else
        {
            front++;
        }
        return ans;
    }

    // Destructor to clean up the dynamically allocated memory
    ~Queue()
    {
        delete[] arr;
    }
};

int main()
{
    Queue q(5); // Create a queue of size 5
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    q.enqueue(5);
    q.enqueue(6); // This should show "Queue is full"
    
    cout << q.dequeue() << "\n"; // Should dequeue 1
    cout << q.dequeue() << "\n"; // Should dequeue 2
    
    return 0;
}

output 
Queue is full
1
2
